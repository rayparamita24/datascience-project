# -*- coding: utf-8 -*-
"""facebookSpam.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Taw4sPAquJaBmyG-_l8nvQoU0qqHsKUn
"""

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report, roc_curve, roc_auc_score
import nltk
from nltk.corpus import stopwords
import re
nltk.download('stopwords')

# Sample data
df = pd.read_csv('/content/day.csv')  # Ensure your CSV has 'post' and 'label' columns
df1 = pd.read_csv('/content/message.csv')  # Ensure your CSV has 'post' and 'label' columns

from sklearn.feature_extraction.text import TfidfVectorizer
def preprocess_text(text):
    # Handle non-string values
    if not isinstance(text, str):
        text = str(text)

    # Remove URLs
    text = re.sub(r'http\S+|www\S+|https\S+', '', text, flags=re.MULTILINE)
    # Remove user @ references and '#'
    text = re.sub(r'\@\w+|\#', '', text)
    # Remove punctuations
    text = re.sub(r'[^\w\s]', '', text)
    # Remove stopwords
    stop_words = set(stopwords.words('english'))
    text = " ".join([word for word in str(text).split() if word not in stop_words])
    return text

df1['post'] = df1['status_message'].apply(preprocess_text)
df1['post']= df1['status_message'].dropna()
df1['post'] = df1['post'].fillna('')
vectorizer = TfidfVectorizer()

# Fit and transform the documents
tfidf_matrix = vectorizer.fit_transform(df1['post'])

# Create a DataFrame with the TF-IDF scores
tfidf_df = pd.DataFrame(tfidf_matrix.toarray(), columns=vectorizer.get_feature_names_out())

print(tfidf_df)
import matplotlib.pyplot as plt
from wordcloud import WordCloud

# Sum the TF-IDF scores for each word
word_scores = tfidf_df.sum(axis=0)

# Create a dictionary of word scores
word_scores_dict = word_scores.to_dict()

# Generate the word cloud
wordcloud = WordCloud(width=800, height=400, background_color='white').generate_from_frequencies(word_scores_dict)

# Plot the word cloud
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud Based on TF-IDF Scores')
plt.show()






m=df['BJP']
n=df['IND']
o=df['OTHER']

df = pd.DataFrame(data)

plt.figure(figsize=(12, 6))
plt.scatter(df['BJP'], df['IND'],df['OTHER'], c=df['Days'], cmap='viridis')
plt.colorbar(label='Time')
plt.xlabel('Days')
plt.ylabel('Parties')
plt.title('Scatter Plot of Variables with Time as Color')
plt.grid(True)
plt.show()
plt.figure(figsize=(12, 6))
plt.plot(df['Days'], df['BJP'], label='BJP')
plt.plot(df['Days'], df['IND'], label='IND')
plt.plot(df['Days'], df['OTHER'], label='OTHER')
plt.xlabel('Days')
plt.ylabel('Values')
plt.title('Day wise likes for all political parties')
plt.legend()
plt.grid(True)
plt.show()